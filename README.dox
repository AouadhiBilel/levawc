/**
 * @file README.dox
 * @mainpage Project Presentation
 * @par Introduction
 * Some basic dynamic data structures implemented as pure, generic ADT:s, coded in ANSI C.
 * - Singly-linked list
 * - Doubly-linked list
 * - Circular, singly-linked list
 * - Stack
 * - Queue
 * - Set
 * - Chained hash table
 * - Open-addressed hash table
 * - Heap
 * - Priority queue
 * - Binary search tree
 * - AVL tree
 * - Graph
 *
 * @par Source
 *  Original and major parts of the code written by 
 * <a href="http://www.kyleloudon.com/" target="_blank">Kyle Loudon</a>, in his book "Mastering Algorithms with C", published at <a href="http://shop.oreilly.com/product/9781565924536.do" target="_blank">O'Reilly Company</a>.\n
 * Minor adjustments and extensions added by <a href="https://github.com/dale48" target="_blank">Dan Levin</a>.
 * @author   <a href="http://www.kyleloudon.com/" target="_blank">Kyle Loudon</a> and <a href="https://github.com/dale48" target="_blank">Dan Levin</a>
 * @date     <b>Wed Feb 18 08:52:13 2015</b>
 * @version  0.50 (<a href="md__change_log.html">To ChangeLog</a>)
 * @par Demos
 * The demos are trying to test and show most of the public interface of the ADT:s - accordingly:
 * - <code>demo1.c</code> - testing/showing Singly-linked List ADT..
 * - <code>demo2.c</code> - testing/showing Doubly-linked List ADT..
 * - <code>demo3.c</code> - testing/showing Stack and Queue ADT..
 * - <code>demo4.c</code> - testing/showing Chained Hash Table ADT..
 * - <code>demo5.c</code> - testing/showing Heap and Priority Queue ADT..
 * - <code>demo6.c</code> - testing/showing Binary Search Tree ADT..
 * - <code>demo7.c</code> - testing/showing AVL Tree ADT..
 * - <code>demo8.c</code> - testing/showing Circular, Singly-linked List ADT..
 * - <code>demo9.c</code> - testing/showing Set ADT..
 * - <code>demo10.c</code> - testing/showing Open-addressed Hash Table ADT..
 * - <code>demo11.c</code> - testing/showing Graph ADT..
 * - <code>demo12.c</code> - a more extensive Graph ADT application, using Dijkstra's Shortest Path algorithm.
 * A (low-cost) criss-cross flight <a href="eu.pdf" target="_blank">within EU</a>.
 * @par Testing
 * All demos have been tested on both Windows and Linux. Memory leak detection/tracing was done with Valgrind (Linux).
 * @par ToDo
 * - Publishing version 1.0 (probably next version uploaded to GitHub..)
 * - Adding more Graph Algorithms(=Minimal Spanning Tree, Traveling Salesmans Problem, Breadth- and Depth-First Search)...\n
 * - Adding a function - <code>AVLTREEhard_remove()</code> - which <i>physically</i> removes a node from an AVL Tree. Ok - no performance gain - but a personal coding challenge ;-)
 * - Extending and fine-tuning Project Documentation - still some issues to fix here..
 * .
 **/
